{"organizations": [], "uuid": "4677e6ec7ca9efb312de54cf1285c02d9087cab4", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 0, "shares": 0, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.forbes.com", "main_image": "{{meta.image}}", "site_section": "http://www.forbes.com/intelligent-technology/", "section_title": "Forbes - Future Technology News &amp; Information - Forbes.com", "url": "http://www.forbes.com/sites/kevinknudson/2015/09/08/solitaire-voting-and-the-monte-carlo-method/", "country": "US", "title": "Solitaire, Voting And The Monte Carlo Method", "performance_score": 3, "site": "forbes.com", "participants_count": 1, "title_full": "Solitaire, Voting And The Monte Carlo Method", "spam_score": 0.0, "site_type": "news", "published": "2015-09-09T10:26:00.000+03:00", "replies_count": 0, "uuid": "4677e6ec7ca9efb312de54cf1285c02d9087cab4"}, "author": "Kevin Knudson", "url": "http://www.forbes.com/sites/kevinknudson/2015/09/08/solitaire-voting-and-the-monte-carlo-method/", "ord_in_thread": 0, "title": "Solitaire, Voting And The Monte Carlo Method", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "english", "persons": [], "text": "A recent update to the solitaire app on my phone installed only winning deals. That is, every game can be won, although it may not be completely obvious how to do so. If you make a wrong move at some point, you may lose. The app allows games to be restarted so that you can try again if you get stuck. At first, I wasn't convinced I would like having every game winnable since it seems like cheating, but as it turns out I rather enjoy it. With the old version if I didn't win on the first try I would simply start a new game, but now, since I know the game can be won, I will restart it a few times until I figure out the right sequence of moves to get the win. It's like a puzzle. This weekend, I really got stuck.[caption id=\"attachment_189\" align=\"\" width=\"640\"] A tough game, screen capture by the author[/caption]Note the 2:59:39 at the bottom right; that's how long I had been trying to win this game at the time. In the end, I won, after approximately 100 restarts and 4:30:00 in (nonconsecutive) playing time (good thing it was a long weekend).With the old fashioned app I might restart a game a couple of times to see if I could win before giving up and moving on. Under that scenario I won roughly one game in six, with a win percentage of about 17%. That of course got me thinking about the probability of winning any particular game of solitaire. As it turns out, the answer is unknown, which surprised me a bit since it is such a well-known and popular game.What's preventing a calculation of the odds? The sheer size of the problem. The number of possible shuffles of a standard deck of cards is 52! = 52 × 51 × ... × 3 × 2 × 1, which is approximately 8 x 10 67 . That is a huge number; to give you a sense of how huge note that there are about 10 80 atoms in the universe. A shuffle of the deck determines a game of solitaire. These games aren't all distinct since, for example, we could interchange the two red suits card for card and obtain the same game, but the number of unique games is still very large ( Wikipedia says , without citation, that it's about 7 × 10 15 but that seems too low). The standard strategy for computing probabilities of certain outcomes is to count the number of possible events and then count the number of outcomes you are interested in. The ratio of these numbers is then the probability. For example, the probability of rolling an 8 when tossing two fair six-sided dice is 5/36 since there are 36 possible outcomes and only 5 of them add up to 8. In the case of solitaire, even the fastest computers would take an impossibly long time to run through all the possible deals and count all the winning hands. So, what to do?The answer is to make an estimate using the Monte Carlo method . This is a standard technique in probability and statistics. The basic idea is to choose a large, yet manageable number N of games and then determine the number W that are winnable. This gives a rough estimate of the probability p that a random game is winnable: p ≈ W/N . Taking N to be larger gives a better estimate (unless you happen to get a really non-random and unlucky collection of games). This method works well, though, as one can show that there is a 95% probability that the actual value of p is within two standard deviations of W/N (the standard deviation is a measure of the spread of a collection of data from its mean). You could do this by hand. In fact, there is an interesting example of someone doing just that. The estimate in that case turned out to be p ≈ 0.79, with a standard deviation of 0.08, by simply examining 100 games (using actual playing cards!). A more extensive simulation found that p ≈ 0.82. I thought my 17% winning rate was pretty good, but clearly I'm not that good of a player.Note that this is the probability that a game is theoretically winnable, but that is no guarantee that you will win a given game, as my 4.5 hour adventure shows. To guarantee that you win, you would need complete knowledge of the location of each card in the deal so that you don't make a wrong move somewhere. This amounts to navigating through the decision tree associated to the deal--the diagram that shows every possible move you can make at each turn. There may be several successful strategies for a given game; indeed, anyone who has won a game of solitaire handily no doubt noticed that there was considerable flexibility about the order in which cards get moved. Some games are much more demanding, however.Monte Carlo methods get used in many disciplines outside of mathematics including physics, engineering and finance--basically in any scenario where you need to know the probability of certain outcomes from a large set of possibilities. One of my favorite recent applications is to the analysis of election data . North Carolina has 13 Congressional districts and in the 2012 election approximately 54% of voters chose Democratic candidates. Yet, Republicans won nine of the seats. This raises the question: assuming the districts were drawn fairly, how likely is this outcome?To answer this, Duke University mathematician Jonathan Mattingly and his student Christy Vaughn created a model. Congressional districts in a given state must divide the population evenly and be \"compact.\" There are roughly 10 2785 possible maps that could be drawn in North Carolina (talk about a big number!). So to get a sense of what sorts of outcomes are likely they had to use a Monte Carlo procedure to estimate the probabilities of various results . The upshot: out of 100 randomly chosen districting maps, about 80% had seven or eight Democratic candidates elected, and all 100 had between six and nine. Not once did only four Democrats win. So it seems that the state's districts might not be drawn fairly after all.As computers continue to get faster, Monte Carlo methods will undoubtedly see heavy action in attempts to simulate ever more elaborate scenarios. We will probably never see speeds sufficient to analyze every game of solitaire, and certainly never witness the examination of every voting map of North Carolina, but we should be able to model complicated global systems effectively using this well established technique.", "external_links": ["http://www.jupiterscientific.org/sciinfo/KlondikeSolitaireReport.html", "http://arxiv.org/abs/1410.8796", "https://en.wikipedia.org/wiki/Monte_Carlo_method", "https://en.wikipedia.org/wiki/Standard_deviation", "https://en.wikipedia.org/wiki/Klondike_%28solitaire%29", "http://web.engr.oregonstate.edu/~afern/papers/solitaire.pdf", "http://wunc.org/post/duke-mathematicians-investigate-2012-election-results-north-carolina#stream/0", "https://en.wikipedia.org/wiki/Decision_tree", "http://www.solebon.com/"], "published": "2015-09-09T10:26:00.000+03:00", "crawled": "2015-09-09T05:27:36.162+03:00", "highlightTitle": ""}