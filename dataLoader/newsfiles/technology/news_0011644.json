{"organizations": [], "uuid": "2c9e804f3dd876ed7b333bf3b45faba3eeaac7de", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 0, "shares": 0, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "radar.oreilly.com", "main_image": "http://cdn.oreillystatic.com/radar/images/people/photo_mfitzgerald_m.jpg", "site_section": "http://feeds.feedburner.com/oreilly/radar/atom", "section_title": "O'Reilly Radar - Insight, analysis, and research about emerging technologies", "url": "http://radar.oreilly.com/2015/09/blocks-in-ruby.html", "country": "IL", "title": "Blocks in Ruby", "performance_score": 0, "site": "oreilly.com", "participants_count": 1, "title_full": "Blocks in Ruby", "spam_score": 0.0, "site_type": "news", "published": "2015-09-25T05:25:00.000+03:00", "replies_count": 0, "uuid": "2c9e804f3dd876ed7b333bf3b45faba3eeaac7de"}, "author": "Michael Fitzgerald", "url": "http://radar.oreilly.com/2015/09/blocks-in-ruby.html", "ord_in_thread": 0, "title": "Blocks in Ruby", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "english", "persons": [], "text": "gimme { print \"Say hi again. \" } # => Say hi again. Say hi again. \nAnother thing you ought know is that after yield executes, control goes back to the statement immediately following it. There’s certainly more to say about yield , but I’ll leave it at that. Do blocks have return values? \nJust a note here, in closing, about return values and blocks. Blocks don’t really have return values, not in the same way their parent methods can. If you use a return statement in a block, the containing method will return, not the block. A block yields the value of its last expression. You don’t need to use return in a block, nor should you. blocks, procs, and lambdas \nA proc is a way to store a procedure in Ruby. Procs are often short, one-liners, though not always. One reason I’m bringing them up here is because a proc is not a proc without a block in Ruby. \nFirst, a little background. A proc is a first-class object that comes complete with context. As a first-class object, a proc can be created at runtime, stored in data structures, passed as a parameter, and so on. To create a proc, you can call Proc::new , Kernel#lambda , or Kernel#proc . \nThe term lambda comes from Alonzo Church’s lambda calculus , which famously influenced the development of the Lisp programing language and more recent functional programming languages. Lambda logic can be found in a number of programming languages, including Lisp, Python, Swift, C#, and Ruby, among others. Generally, lambdas are anonymous functions that can be written inline and easily discarded. \nWhat’s the difference between procs and lambdas? Lambdas behave more like methods and procs behave more like blocks, but both are instances of the Proc class. For brevity, I’ll only show a lambda here. \nWhen creating a lambda with the methods mentioned, a block is required. Kernel ‘s lambda method, for example, expects a block. A call to lambda is equivalent to calling Proc.new and both calls return a proc object. Here is a call to lambda which of necessity includes a block, followed by a call to the new proc: countdown = lambda { [5,4,3,2,1].each do |i| print i end } countdown.call 1 countdown = lambda { [ 5 , 4 , 3 , 2 , 1 ] . each do | i | print i end } countdown . call \nBy the way, since 1.9, you can use the following simplified, lambda literal syntax, with the same result: countdown = -> { [5,4,3,2,1].each do |i| print i end } countdown.call 1 countdown = -> { [ 5 , 4 , 3 , 2 , 1 ] . each do | i | print i end } countdown . call \nThere’s much to learn about lambdas. I just wanted to show, briefly, how blocks are used with procs. A fuller treatment of procs merits another article. Summary \nLet me wrap up with a brief summary of blocks. Blocks are essentially nameless functions that provide a concise way to iterate over objects. An iterator method such as each without a block will return only an enumerator. Blocks have one or more parameters. In addition, a block does not have a return value like a method. It yields the value of its last expression. Finally, stored procedures in Ruby — procs — use blocks as well. \nThanks for reading. Happy coding. \nNote: If you’d like to get more detail, Mike suggests reading section 5.4 on blocks and section 6.5 on procs and lambdas in The Ruby Programming Language by David Flanagan and Yukihiro Matsumoto, plus chapter 8 on blocks in Lucas Carlson’s Ruby Cookbook . Both are from O’Reilly. \nPublic domain studs image via Pixabay .", "external_links": [], "published": "2015-09-25T05:25:00.000+03:00", "crawled": "2015-09-25T15:23:12.298+03:00", "highlightTitle": ""}