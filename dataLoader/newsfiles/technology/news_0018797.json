{"organizations": [], "uuid": "384d9d2f002cdefd0b5d73755f97fecd1edbd9a1", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 0, "shares": 0, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "www.theguardian.com", "main_image": "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/8/28/1440776703271/6b642dcc-1694-40bf-9196-4aec8cdbed4e-2060x1236.jpeg?w=1200&amp;q=85&amp;auto=format&amp;sharp=10&amp;s=d70c6ed7cd682910a72e97e06d726ac2", "site_section": "http://www.theguardian.com/technology/all", "section_title": "Technology | The Guardian", "url": "http://www.theguardian.com/teacher-network/2015/sep/01/how-to-teach-coding-programming", "country": "GB", "title": "How to teach coding and programming | Teacher Network", "performance_score": 2, "site": "theguardian.com", "participants_count": 1, "title_full": "How to teach coding and programming | Teacher Network | The Guardian", "spam_score": 0.0, "site_type": "news", "published": "2015-09-01T23:32:00.000+03:00", "replies_count": 1, "uuid": "5b7a0857f43e73fb926aa1ec3470f2920406750d"}, "author": "", "url": "http://www.theguardian.com/teacher-network/2015/sep/01/how-to-teach-coding-programming#post-0", "ord_in_thread": 0, "title": "How to teach coding and programming | Teacher Network", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "english", "persons": [], "text": "From playing about with animations to designing computer games, teaching coding in schools lends itself to plenty of fun learning activities.\nThe topic was introduced last year as part of the new information communication technology (ICT) curriculum , to equip students with the skills they’ll need for the future workplace.\nSo this week on the Guardian Teacher Network we’ve been exercising our digital logic to bring together a selection of ideas and resources about teaching computer programming and coding.\nPrimary schools A great starting place for anyone unfamiliar with the new computing curriculum is the Computing at School (CAS) QuickStart Computing website , which features continued professional development (CPD) materials designed to help primary and secondary teachers deliver the new curriculum. Resources include a video that explains the various approaches to teaching computing and a guide on getting started with confidence .\nComputational thinking , a process that allows us to think of complex problems in a way that can be resolved by a computer, is central to the new curriculum. The concept can be explored at key stage 1 with this Crazy Character Algorithms activity by CAS Barefoot Computing . It provides a brilliant introduction to creating sequences of instructions, or algorithms. Students are encouraged to see algorithms like sets of rules that must be followed. If they are not precise enough errors will occur, but they can be fixed by “debugging” them. The lesson explains a lot of key computing vocabulary that could be used to create a colourful word wall.\nRelated: Teaching computing for the first time: how I brought computer science into my lessons\nPut students’ computational thinking to the test by programming floor robots such as a Roamers or Bee-Bots . As your class become more adept at creating algorithms and translating these into code, they could try programming a Bee-Bot to trace a particular shape . Can they look at somebody else’s code and predict what it will make the Bee-Bot do? As an extension task, challenge students to find examples of other electronic devices that can be programmed.\nCapture imaginations by asking key stage 2 students to design, write and debug programs that accomplish specific goals. They can do this by experimenting with a variety of programming languages. In this activity, students explore a language called Scratch . They work on an existing program then tinker with a blank project to see how the changes they make alter the program. This resource includes step-by-step instructions on how to use Scratch to control a computer graphic or “sprite” , while this one looks at another programming language called Kodu .\nCodes can also be used to create cool animations. This video explains the process using a friendly dancing cat. Students can also find out about the role of algorithms and code in making computer games . As a revision task, your class could try making videos or animations about an aspect of computer science – these examples provide great inspiration .\nYou might also want to look at Code Club , a nationwide network of volunteer-led after-school coding clubs for children aged nine to 11. Another good resource is CS Unplugged , a collection of free learning activities that teach computer science using cards, string, crayons and running around.\nYou’ll find more computing themed lesson plans for key stage 1 and key stage 2 here . Free resources are also available on the Discovery Education website, and there are great “unplugged” activities, which reinforce the basic principles of computer science without requiring access to a computer, on the Teaching London Computing website . An example is this Emotion Machine activity . As an assessment task, pair students up and ask them to play a verbal tennis match in which they take it in turns to say one thing each that they have learnt about programming and code.\nSecondary schools This video , featuring the likes of Bill Gates and Mark Zuckerberg, is great for showing students how learning to code can open up a world of possibilities. As the founder and chief executive officer of Dropbox , Drew Houston, says, coding is “the closest thing we have to super powers”. Do they agree with Gabe Newell, the co-founder of video game development company Valve , that coding can make you “look like you have magic powers compared to everybody else”?\nCodeacademy is another good source of material for teaching coding at secondary level . It has created online schemes of work on a range of programming topics including HTML, CSS, Python and Javascript. These feature interactive exercises and quizzes designed to test students’ understanding .\nRelated: My top five resources for teaching ICT and computer science\nPlaying computer games in class might seem like a dream come true for some students, but it’s also a great way to teach code. Capture pupils’ imaginations with this lesson plan by Wissp Education , which provides step-by-step instructions on making games and applications using Flash software . It includes an introduction to creating basic sprites , then moves on to animating them and programming sound effects for them. There are nine lessons in total .\nRobotics is another exciting route into programming as it brings virtual reality into the real world. VEX Robotics offer a range of lessons around Python and C++, two of the most popular programming languages used in industry. This PowerPoint introduces students to programming a “bumper switch” to guide a robot around an obstacle course , while this activity looks at the kind of sensors that can be programmed to make a robot perform various functions .\nTeaching your class how to program mobile apps is also a good way to motivate secondary students to learn coding. AppInventor.org allows students to code apps by plugging together high-level puzzle pieces. Alternatively, AppShed Academy is a free learning resource that covers app creation from the basics through to advanced programming techniques. Lesson plans are available for teachers, and there are video tutorials for students.\nFor more ideas see this How to teach article about robotics and these blogs on engineering .\nFollow us on Twitter via @GuardianTeach . Join the Guardian Teacher Network for lesson resources, comment and job opportunities , direct to your inbox.", "external_links": ["http://www.bbc.co.uk/education/subjects/zyhbwmn", "http://barefootcas.org.uk/", "https://www.codeclub.org.uk/", "http://barefootcas.org.uk/activities/", "https://www.youtube.com/embed/nKIu9yen5nc?wmode=opaque&feature=oembed", "https://www.codecademy.com/schools/curriculum/resources", "http://www.valvesoftware.com/", "http://www.quickstartcomputing.org/", "http://appshed.com/academy", "http://www.youtube.com/watch?v=nKIu9yen5nc", "http://teachinglondoncomputing.org/resources/inspiring-unplugged-classroom-activities/", "http://www.discoveryeducation.com/", "http://www.wissp.com/)", "https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study", "http://primary.quickstartcomputing.org/resources/mp4/teaching_comp.mp4", "http://www.appinventor.org/", "http://www.bbc.co.uk/education/guides/zp92mp3/revision", "http://csunplugged.org/", "http://www.quickstartcomputing.org/secondary/section2.html", "https://twitter.com/GuardianTeach", "http://www.bbc.co.uk/guides/zchc4wx", "http://www.bbc.co.uk/guides/zskthyc", "https://www.dropbox.com/", "http://www.vexcurriculum.co.uk/"], "published": "2015-09-01T23:32:00.000+03:00", "crawled": "2015-09-01T18:13:22.384+03:00", "highlightTitle": ""}